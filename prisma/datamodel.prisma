type User {
  id: ID! @id @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  blocked: Boolean! @default(value: false)
  email: String! @unique
  displayName: String!
  passwordHash: String!
  confirmed: Boolean! @default(value: false)
  permissions: [PermissionType] @scalarList(strategy: RELATION)
  threads: [Thread] @scalarList(strategy: RELATION)
}

enum PermissionType {
  USER
  ADMIN
}

type Thread {
  id: ID! @id @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  blocked: Boolean! @default(value: false)
  posts: [Post] @scalarList(strategy: RELATION)
  tags: [Tag] @scalarList(strategy: RELATION)
}

type Post {
  id: ID! @id @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  blocked: Boolean! @default(value: false)
  name: String!
  meme: Meme!
  author: User!
  tags: [Tag] @scalarList(strategy: RELATION)
}

type Meme {
  id: ID! @id @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  blocked: Boolean! @default(value: false)
  author: User!
  memeItems: [MemeItem]! @scalarList(strategy: RELATION)
  tags: [Tag] @scalarList(strategy: RELATION)
}

type MemeItem {
  id: ID! @id @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  blocked: Boolean! @default(value: false)
  type: MemeItemType!
  meta: String!
  value: String!
  style: String!
  tags: [Tag] @scalarList(strategy: RELATION)
}

enum MemeItemType {
  CANVAS,
  IMAGE,
  TEXT
}

type Tag {
  id: ID! @id @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  blocked: Boolean! @default(value: false)
  name: String!
}
